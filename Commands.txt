1. To get repository status: git status

2. To add a file: git add

3. To to unstage git reset -- "filename"

4. To unstage all: git reset .

NOTE: home/share common for all users in server.

5. To configure key use: ssh-keygen -t rsa -C "xpid"
   The key is generated in ~/.ssh
   Paste the generated key in gerrit->settings->SSH public keys
   
6. To clone goto gerrit->projects->find project->click on ssh & Clone with commit-msg hook-> copy the link-> execute in terminal

7. To remove untracked files: git clean -f

8. To unco changes to HEAD: git reset --hard HEAD

9. history of repository: gi log

10. List of local branches: git branch

11. History of branch: git log "branch name"

12. History of file: git log -- "filename"

13. To show difference between working directory and index: git diff

14. To show differnce between staged changes in index and given commit: git diff --cached commit (commit uaually HEAD)

15. To show diference between branches: git diff branch1..branch2

15. To restore working directory and index using:: gi reset --hard

16. To delete branch: git branch -D "branch name"

17. To create branch: git checkout -b "branch name"

18. The repository browser: gitk

19. To show history of specified files and directories:  gitk REF1..REF2 -- file (REF is beanch, tag or SHA1)

20 To undo: Esc+u

21. Mergetool: git mergetool

22. To merge: git merge "branch name)

23. To abort rebase: git rebase -- abort

24. To delete line in editor: Esc+D+D

25. gerrit->Projects->List->platfrom/amssmanifest

	We have 4 kinds of branches of our concern namely, ref->bpf->int->main
	
	In .repo/manifest we find the default.xml. In default .xml we have revision for each component.
	Revision could be either Tag, branch or SHA1 referring to a branch(an upstream branch)
	
26.	Command to download source code:
* for AU
    repo init -u -b 

* for AMSS 
    repo init -u -b 
    vi .repo/manifests	 	
    repo sync -j32

* for chipcode
    repo init -u -b 

NOTE: In above commands the branch has to be mentioned from where we are downloading, for example xxx for amss.(Dont worry about chipcode nw)

_*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*__*-*_

1. In JIRA we can have 4 topic branches:
- Ref branch commits - This branch will contain all mirror to reff branch commits
- BPF branch commits
- INT branch commits
- MAIN branch commits

-> Suppose we want to merge from Ref branch to int branch
-  Do clone of the git by going to ref branch->choose git->goto settings, choose SSH and Clone with commit-msg hook. Copy the link and run in terminal.
- Now to reset it to int branch: git reset --hard origin/(int branch name which we get once we click int topic in JIRA)
- Now to merge ref to int branch: git merge "REF SHA1 for that git" -v --stat --no-ff --log=300 -m "Merge message"
eg. git merge ede41f3330f3e1df552b058figj6gj6823453232 -v --stat --no-ff --log=300 -m "Merge xyxy to yxyx for Pre-CS1 0.0.046.1"
- Check conflicts, of three types 
Deleted by us(sony)
Deleted by Qualcomm
Both modified
- If Deleted by us then run: git status --porcelain | grep ^DU | awk '{print $2}' | xargs -I {} git rm {}
- Do: git commit
- To push to gerrit: git push origin HEAD:refs/drafts/"Name of the branch"
eg. git push origin HEAD:refs/drafts/xyxy
Now the commit will be visible in gerrit.
Push is of 3 types:
-for: visible to all 
-drafts: visible to reviewer and who made the push
-heads: gets merged directly into branch (dont use this)

Once push is done it will generate one link to gerrit.

2.  To create a patch set make a change in file, add (git add .) and commit using: git commit --amend
NOTE: Once we do git log the Change ID should always be in the end
	  To delete line: Esc dd
	  To paste line: Esc p
	Now push that commit using: git push origin HEAD:refs/drafts/"Name of the branch"
	eg. git push origin HEAD:refs/drafts/xyxy
It will come as patchset

3. To commit changes to a gerrit with a new change ID, make change in file, add (git add .) and commit using: git commit
   Now Push that commit using: git push origin HEAD:refs/drafts/"Name of the branch"
   eg. git push origin HEAD:refs/drafts/xyxy
   
4. To make changes on a previous commit you need to checkout that commit in your git by copying the checkout link from download of that commit.
   Make changes to file.
   use: git add .
   use: git commit --amend 
   Note the change ID for the new commit will be same for the commit we had checkout.
   Now push using: git push origin HEAD:refs/drafts/"Name of the branch"
				   eg. git push origin HEAD:refs/drafts/xxyy
->Suppose we take Ref branch and choose a commit from it.
->To clone git 
->To get commit changes in the gerrit into our git goto Download->Checkout and copy the link and run in termial.
-> To reset the git use: git reset --hard origin/(name of the branch)





